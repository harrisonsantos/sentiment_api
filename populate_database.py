"""
Script para popular o banco de dados com dados de exemplo para demonstra√ß√£o.
Este script cria avalia√ß√µes diretamente no banco sem usar a API.
"""
import sys
import os
from datetime import datetime, timedelta
import random

# Adicionar o diret√≥rio da aplica√ß√£o ao path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.models import Review, SessionLocal, create_tables
from app.sentiment_service import SentimentAnalyzer

# Dados de exemplo para popular o banco
SAMPLE_REVIEWS = [
    # Avalia√ß√µes positivas
    ("Maria Silva", "Excelente atendimento! Muito satisfeita com o servi√ßo prestado."),
    ("Jo√£o Santos", "Produto de alta qualidade, superou minhas expectativas!"),
    ("Ana Costa", "Equipe muito prestativa e eficiente. Recomendo!"),
    ("Pedro Oliveira", "Servi√ßo r√°pido e profissional. Adorei a experi√™ncia!"),
    ("Carla Lima", "Fant√°stico! Tudo funcionou perfeitamente."),
    
    # Avalia√ß√µes negativas
    ("Roberto Ferreira", "P√©ssimo atendimento, muito demorado e ineficiente."),
    ("Juliana Rocha", "Produto com defeito e suporte n√£o resolveu o problema."),
    ("Carlos Almeida", "Experi√™ncia terr√≠vel, n√£o recomendo para ningu√©m."),
    ("Fernanda Dias", "Muito insatisfeita com o servi√ßo prestado."),
    ("Ricardo Gomes", "Atendimento ruim e produto de baixa qualidade."),
    
    # Avalia√ß√µes neutras
    ("Luciana Martins", "Servi√ßo ok, nada excepcional mas cumpriu o b√°sico."),
    ("Marcos Barbosa", "Produto mediano, funciona mas poderia ser melhor."),
    ("Patricia Souza", "Atendimento padr√£o, sem grandes problemas ou elogios."),
    ("Andr√© Ribeiro", "Experi√™ncia regular, dentro do esperado."),
    ("Camila Castro", "Servi√ßo aceit√°vel, mas h√° espa√ßo para melhorias."),
    
    # Avalia√ß√µes em ingl√™s
    ("John Smith", "Amazing service! Very satisfied with the quality."),
    ("Sarah Johnson", "Terrible experience, would not recommend."),
    ("Mike Wilson", "Average service, nothing special but okay."),
    
    # Avalia√ß√µes mistas
    ("Beatriz Lopes", "O produto √© bom, mas o atendimento deixou a desejar."),
    ("Gabriel Moura", "Gostei do servi√ßo em geral, mas houve alguns problemas."),
]

def create_sample_data():
    """Cria dados de exemplo no banco de dados."""
    print("üóÑÔ∏è Criando dados de exemplo no banco de dados...")
    
    # Criar tabelas se n√£o existirem
    create_tables()
    
    # Inicializar analisador de sentimento
    analyzer = SentimentAnalyzer()
    
    # Criar sess√£o do banco
    db = SessionLocal()
    
    try:
        # Verificar se j√° existem dados
        existing_count = db.query(Review).count()
        if existing_count > 0:
            print(f"‚ö†Ô∏è J√° existem {existing_count} avalia√ß√µes no banco.")
            response = input("Deseja adicionar mais dados? (s/n): ")
            if response.lower() != 's':
                print("‚ùå Opera√ß√£o cancelada.")
                return
        
        created_count = 0
        
        for customer_name, review_text in SAMPLE_REVIEWS:
            # Analisar sentimento
            sentiment, confidence = analyzer.analyze_sentiment(review_text)
            
            # Criar data aleat√≥ria nos √∫ltimos 30 dias
            days_ago = random.randint(0, 30)
            created_at = datetime.now() - timedelta(days=days_ago)
            
            # Criar review
            review = Review(
                customer_name=customer_name,
                review_text=review_text,
                sentiment=sentiment,
                confidence_score=confidence,
                created_at=created_at
            )
            
            db.add(review)
            created_count += 1
            
            print(f"‚úÖ {customer_name}: {sentiment} (confian√ßa: {confidence})")
        
        # Salvar no banco
        db.commit()
        
        print(f"\nüéâ {created_count} avalia√ß√µes criadas com sucesso!")
        
        # Mostrar estat√≠sticas
        total_reviews = db.query(Review).count()
        positive_count = db.query(Review).filter(Review.sentiment == 'positiva').count()
        negative_count = db.query(Review).filter(Review.sentiment == 'negativa').count()
        neutral_count = db.query(Review).filter(Review.sentiment == 'neutra').count()
        
        print(f"\nüìä ESTAT√çSTICAS DO BANCO:")
        print(f"Total de avalia√ß√µes: {total_reviews}")
        print(f"Positivas: {positive_count}")
        print(f"Negativas: {negative_count}")
        print(f"Neutras: {neutral_count}")
        
    except Exception as e:
        print(f"‚ùå Erro ao criar dados: {e}")
        db.rollback()
    finally:
        db.close()

def clear_database():
    """Limpa todos os dados do banco."""
    print("üóëÔ∏è Limpando banco de dados...")
    
    db = SessionLocal()
    try:
        count = db.query(Review).count()
        if count == 0:
            print("‚ÑπÔ∏è Banco j√° est√° vazio.")
            return
        
        response = input(f"‚ö†Ô∏è Isso ir√° deletar {count} avalia√ß√µes. Confirma? (s/n): ")
        if response.lower() == 's':
            db.query(Review).delete()
            db.commit()
            print("‚úÖ Banco de dados limpo com sucesso!")
        else:
            print("‚ùå Opera√ß√£o cancelada.")
    except Exception as e:
        print(f"‚ùå Erro ao limpar banco: {e}")
        db.rollback()
    finally:
        db.close()

def show_database_stats():
    """Mostra estat√≠sticas do banco de dados."""
    print("üìä Estat√≠sticas do banco de dados:")
    
    db = SessionLocal()
    try:
        total = db.query(Review).count()
        if total == 0:
            print("‚ÑπÔ∏è Banco de dados vazio.")
            return
        
        positive = db.query(Review).filter(Review.sentiment == 'positiva').count()
        negative = db.query(Review).filter(Review.sentiment == 'negativa').count()
        neutral = db.query(Review).filter(Review.sentiment == 'neutra').count()
        
        print(f"Total de avalia√ß√µes: {total}")
        print(f"Positivas: {positive} ({positive/total*100:.1f}%)")
        print(f"Negativas: {negative} ({negative/total*100:.1f}%)")
        print(f"Neutras: {neutral} ({neutral/total*100:.1f}%)")
        
        # Mostrar algumas avalia√ß√µes recentes
        recent_reviews = db.query(Review).order_by(Review.created_at.desc()).limit(5).all()
        
        print(f"\nüìù √öltimas 5 avalia√ß√µes:")
        for review in recent_reviews:
            print(f"  {review.id}: {review.customer_name} - {review.sentiment}")
            
    except Exception as e:
        print(f"‚ùå Erro ao consultar banco: {e}")
    finally:
        db.close()

def main():
    """Fun√ß√£o principal."""
    print("üóÑÔ∏è GERADOR DE DADOS DE EXEMPLO - BANCO DE DADOS")
    print("=" * 60)
    
    while True:
        print("\nOp√ß√µes dispon√≠veis:")
        print("1. Criar dados de exemplo")
        print("2. Mostrar estat√≠sticas do banco")
        print("3. Limpar banco de dados")
        print("4. Sair")
        
        choice = input("\nEscolha uma op√ß√£o (1-4): ").strip()
        
        if choice == '1':
            create_sample_data()
        elif choice == '2':
            show_database_stats()
        elif choice == '3':
            clear_database()
        elif choice == '4':
            print("üëã At√© logo!")
            break
        else:
            print("‚ùå Op√ß√£o inv√°lida. Tente novamente.")

if __name__ == "__main__":
    main()

